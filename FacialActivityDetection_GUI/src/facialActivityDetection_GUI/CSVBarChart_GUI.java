/* 
 * File:    CSVBarChart_GUI.java
 * Created: September 2, 2019 3:15:00 PM
 * Author:  Kevin Clark
 * Project: FAD_setup
 * Updated: January 11, 2020
 * Author: Kevin Clark
 */
package facialActivityDetection_GUI;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Shell;

import org.eclipse.swtchart.Chart;
import org.eclipse.swtchart.IAxis;
import org.eclipse.swtchart.IAxisSet;
import org.eclipse.swtchart.IBarSeries;
import org.eclipse.swtchart.IGrid;
import org.eclipse.swtchart.ISeries.SeriesType;
import org.eclipse.swtchart.ITitle;
import org.eclipse.swtchart.LineStyle;
import org.eclipse.swtchart.Range;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * This class exists to graph, display, and save to file the curated data from the CSV files 
 * generated by FADAnalyzser's image analysis.
 * 
 * @author Kevin Clark 09/02/2019
 * 
 */

public class CSVBarChart_GUI 
{
	/**
	 * Attribute ySeries contains the values in the form of double for the graphed Action Units (AUs)
	 */
	private static double[] ySeries;
	
	/**
	 * Attribute xSeries contains the string labels of the data graphed
	 */
	private static String [] xSeries;
	
	/**
	 * Attribute chart of type Chart creates the viewable bar chart
	 */
	private static Chart chart;
	
	/**
	 * Attribute allLines of type list<String> takes in the values passed to it from directory_do_not_delete.txt
	 */
	private static List<String> allLines;
	
	/**
	 * Attribute exportDriectory of type Path is the Path directory to FAD's photo Export Directory.
	 */
	private static Path exportDirectory;
	
	/**
	 * Attribute stringSeries of type String[] contains the values from .CSV used for graphing the AU data
	 */
	private static String[] stringSeries;

	/**
	 * Method chartExector finds .CSV files in the defined export directory passes the 
	 * file names to an array and iteratively calls the chartCreator method to begin the graphing of the AU data for each CSV file
	 * 
	 * @author Kevin Clark
	 */
	public static void chartExecutor()
		{
			//try/catch block for attempting to read from directory_do_not_delete.txt created in FAD_Launcher_GUI
			try 
				{
					allLines = Files.readAllLines(Paths.get(System.getProperty("user.home") + "\\AppData\\Roaming\\FAD\\directory_do_not_delete.txt"));
					exportDirectory = Paths.get(allLines.get(1));
				} 
			catch (IOException e) 
				{
					e.printStackTrace();
				}
		//the following items define the current date to ensure chartExecutor is looking for .CSV files in the most recent folder only	
		Date date = new Date();     
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
	    String strDate = formatter.format(date); 
	    
	    final File folder = new File(exportDirectory + "\\Export-" + strDate);
        
	    List<String> result = new ArrayList<>();
        search(".*\\.csv", folder, result);
        for (int i = 0; i <result.size(); i++) 
        	{
            	chartCreator(result.get(i));
        	}
		}
	/**
	 * Method chartCreator reads a .CSV files and splits the values into a String array calls method createUI, creates and saves the bar graphs
	 * @param s contains the file name/path passed to charCreator from chartExecutor
	 */
	
	public static void chartCreator (String s) 
		{
	        BufferedReader br = null;
	        String line = "";
	        String cvsSplitBy = ",";
	        try 
	        	{
	            br = new BufferedReader(new FileReader(s));
	            br.readLine();
	            while ((line = br.readLine()) != null) {
		            stringSeries = line.split(cvsSplitBy);

		            //check to ensure only faces with a confidence value greater than .8 are graphed
		            if(Double.parseDouble(stringSeries[1]) > .8 ) 
		            {
		            	
		            	//labels and corresponding values for Action Units
		            	String[] xSeries1 = {"Face    " + stringSeries[0],
		            					"Condifence    " + stringSeries[1],
					            		"AU01 Inner Brow Raiser    " + stringSeries[2],
					            		"AU02 Outer Brow Raiser    " + stringSeries[3],
					            		"AU04 Brow Lowerer    " + stringSeries[4],
					            		"AU05 Upper Lid Raiser    " + stringSeries[5],
					            		"AU06 Cheek Raiser    " + stringSeries[6],
					            		"AU07 Lid Tightener    " + stringSeries[7],
					            		"AU09 Nose Wrinkler    " + stringSeries[8],
					            		"AU10 Upper Lip Raiser    " + stringSeries[9],
					            		"AU12 Lip Corner Puller    " + stringSeries[10],
					            		"AU14 Dimpler    " + stringSeries[11],
					            		"AU15 Lip Corner Depressor    " + stringSeries[12],
					            		"AU17 Chin Raiser    " + stringSeries[13],
					            		"AU20 Lip Stretcher    " + stringSeries[14],
					            		"AU23 Lip Tightener    " + stringSeries[15],
					            		"AU25 Lips Part    " + stringSeries[16],
					            		"AU26 Jaw Drop    " + stringSeries[17],
					            		"AU45 Blink    " + stringSeries[18]};
		            xSeries = xSeries1;
		            ySeries = Arrays.stream(stringSeries).mapToDouble(Double::parseDouble).toArray();
		    		File tmpDir = new File(s.substring(0, s.length()-4) + "barChart.jpeg");
		    		boolean exists = tmpDir.exists();
		    		if (exists) 
		    			{}
		    		else
		    			{
			    			Shell shell = new Shell();
				    		shell.setText("");
				    		shell.setSize(900, 900);
				    		shell.setLayout(new FillLayout());
				    		createUI(shell);
				    		shell.open();
		    				chart.save(s.substring(0, s.length()-4) + "_barChart_" + stringSeries[0] + ".jpeg", SWT.IMAGE_JPEG);
		    				//Try/Catch block with thread.sleep is critical, if Chart is not displayed on screen (in background is acceptable) the image saved will be black
		    				try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		    				shell.close();
				    		shell.dispose();
				    		
		    			}
	        	}
	        	}
	        	}
	        catch (FileNotFoundException e) 
	        	{
	            	e.printStackTrace();
	        	} 
	        catch (IOException e) 
	        	{
	            	e.printStackTrace();
	        	} 
	        finally 
	        	{
	            	if (br != null) 
	            		{
	            			try 
	            				{
	            					br.close();
	            				} 
	            			catch (IOException e)
	            				{
	            					e.printStackTrace();
	            				}
	            		}
	        	}
		}
    
	/**
	 * Method createUI creates the visual chart that will be displayed on screen, and subsequently saved to file
	 * 
	 * @param parent
	 * 
	 * @author Kevin Clark
	 */
	
	static public void createUI(Composite parent) 
		{
			chart = new Chart(parent, SWT.NONE);
			chart.setOrientation(SWT.VERTICAL);
			ITitle graphTitle = chart.getTitle();
			
			//labels which face the graph is for, matching data and confidence are in the CSV file
			graphTitle.setText("Action Unit Activity for Face: " + stringSeries[0] + "\n" + "Confidence: " + stringSeries[1]);			
			IAxis yAxis = chart.getAxisSet().getYAxis(0);
			yAxis.setRange(new Range(0, 5));
			IAxis xAxis = chart.getAxisSet().getXAxis(0);
			xAxis.setCategorySeries(xSeries);
			xAxis.enableCategory(true);
			xAxis.setRange(new Range(2, 20)); 
			IAxisSet axisSet = chart.getAxisSet();
			IGrid xGrid = axisSet.getXAxis(0).getGrid();
			xGrid.setStyle(LineStyle.NONE);
			chart.getAxisSet().getXAxis(0).getTitle().setText("Action Units");
			chart.getAxisSet().getYAxis(0).getTitle().setText("Intensity");
			IBarSeries barSeries = (IBarSeries)chart.getSeriesSet().createSeries(SeriesType.BAR, "AU Intensity");
			barSeries.setYSeries(ySeries);
		}

	/**
	 * Method takes in paramaters from method chartExecutor, checks to make sure item is of type file before adding it to result
	 * 
	 * @param pattern - ".*\\.csv"
	 * @param folder - directory where .CSV files will be
	 * @param result - string list of .CSV files in folder
	 * 
	 * @author Kevin Clark
	 */
    public static void search(final String pattern, final File folder, List<String> result) 
    	{
        	for (final File f : folder.listFiles()) 
        		{

        			if (f.isFile()) 
        				{
        					if (f.getName().matches(pattern)) 
        						{
        							result.add(f.getAbsolutePath());
        						}
        				}
        		}
    	}
}
